/*
 * @lc app=leetcode.cn id=190 lang=java
 *
 * [190] 颠倒二进制位
 * 颠倒给定的 32 位无符号整数的二进制位。
 */

// @lc code=start
// 方法二：分治，
// 若要翻转一个二进制串，可以将其均分成左右两部分，
// 对每部分递归执行翻转操作，然后将左半部分拼在右半部分的后面，即可完成翻转。
// 时间复杂度： O(1)
// 空间复杂度：O(1)
public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        // 注意：>>> 与 >> 的区别
        // >>>（无符号右移，高位通通补0）
        // >>（带符号右移。正数右移高位补0，负数右移高位补1）
        n = n >>> 16 | n << 16; // 把整个 n 分成左右两部分进行翻转拼接
        n = n >>> 8 & 0x00ff00ff | (n & 0x00ff00ff) << 8; // 将左右两部分再各自细分为左右两部分进行翻转拼接
        n = n >>> 4 & 0x0f0f0f0f | (n & 0x0f0f0f0f) << 4; // 接着细分翻转拼接
        n = n >>> 2 & 0x33333333 | (n & 0x33333333) << 2; // 接着细分翻转拼接
        n = n >>> 1 & 0x55555555 | (n & 0x55555555) << 1; // 接着细分翻转拼接
        return n;
    }
}
// @lc code=end

